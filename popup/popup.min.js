!function(){"use strict";const{browserAction:e,runtime:t,tabs:o}=browser;let n;new Promise(((e,t)=>{n=JSON.parse(localStorage.getItem("layoutLensState")),n?(console.log(n),e("Layout lens options found")):(n={appToggle:!0,opacity:.5,currentTab:0,paddingColor:"#D8A658",marginColor:"#58CFD8"},localStorage.setItem("layoutLensState",JSON.stringify(n)),t("Layout lens options set"))})).then((e=>{console.log(e),a()})).catch((e=>{console.log(e),a()}));const a=()=>{const t=()=>{o.query({active:!0,currentWindow:!0}).then((e=>{const t=e[0];o.sendMessage(t.id,n)}))};document.addEventListener("DOMContentLoaded",(()=>{const o=document.getElementById("ll-toggle");!1===n.appToggle&&o.removeAttribute("checked");const a=document.getElementById("opacity-label"),l=document.getElementById("ll-opacity");o.addEventListener("change",(o=>{((e,t)=>{n[t]=!!e.target.checked})(o,"appToggle"),o.target.value?e.enable():e.disable(),localStorage.setItem("layoutLensState",JSON.stringify(n)),t()})),l.addEventListener("input",(e=>{const o=e.target.value;n.opacity=e.target.value,a.innerText=`Opacity ${o}`,t()}))}))}}();
